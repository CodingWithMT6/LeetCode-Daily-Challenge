class Solution {
     public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        List<Integer> leaves1 = new ArrayList<>();
        List<Integer> leaves2 = new ArrayList<>();

        // Traverse the first tree and collect leaf values
        dfs(root1, leaves1);

        // Traverse the second tree and collect leaf values
        dfs(root2, leaves2);

        // Compare the sequences of leaf values
        return leaves1.equals(leaves2);
    }

    private void dfs(TreeNode node, List<Integer> leaves) {
        if (node != null) {
            // Check if the node is a leaf (no left or right children)
            if (node.left == null && node.right == null) {
                leaves.add(node.value);
            }

            // Recursively traverse left and right subtrees
            dfs(node.left, leaves);
            dfs(node.right, leaves);
        }
}
